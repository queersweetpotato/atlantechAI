from http.server import HTTPServer, BaseHTTPRequestHandler
from urllib.parse import urlparse, parse_qs
import predictUserInput as nn

def content(query):
    print("Running content generation function", str(query))
    if query.get("p"):
        params = query.get("p")[0].split(",")
        params.insert(11, "None")
        print("Using parameters", params)
        res = nn.predictUserHealth([(float(x) if x != "None" else None) for x in params])
        print("Returning", res)
    else:
        print("No Query Parameter Found")
        res = "No Query Parameter Found"
    return res

# HTTP Server, responding to GET requests with content generated by the 'content' function
class CloudHTTPRequestHandler(BaseHTTPRequestHandler):

    def _set_cors_headers(self):
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')

    def do_GET(self):
        self.send_response(200)
        self._set_cors_headers()
        self.send_header('Content-Type', 'text/plain')
        self.end_headers()
        queryString = parse_qs(urlparse(self.path).query)
        self.wfile.write(str(content(queryString)).encode())

if __name__=="__main__":
    print("Started Server")
    httpd = HTTPServer(('0.0.0.0', 8080), CloudHTTPRequestHandler)
    httpd.serve_forever()
